{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = keycloak.token;\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","httpLink","uri","authLink","_","headers","token","keycloak","authorization","client","link","concat","cache"],"sources":["D:/MIT CLG/To_Do_App/frontend/src/graphql/client.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = keycloak.token;\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nexport const client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAC5E,SAASC,UAAU,QAAQ,6BAA6B;AAExD,MAAMC,QAAQ,GAAGF,cAAc,CAAC;EAC9BG,GAAG,EAAE;AACP,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC9C,MAAMC,KAAK,GAAGC,QAAQ,CAACD,KAAK;EAC5B,OAAO;IACLD,OAAO,EAAE;MACP,GAAGA,OAAO;MACVG,aAAa,EAAEF,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;IAC7C;EACF,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAMG,MAAM,GAAG,IAAIZ,YAAY,CAAC;EACrCa,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAACV,QAAQ,CAAC;EAC/BW,KAAK,EAAE,IAAId,aAAa,CAAC;AAC3B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}